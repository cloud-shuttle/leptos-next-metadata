name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
        features:
          - "--all-features"
          - "--no-default-features --features ssr"
          - "--no-default-features --features csr"
          - "--no-default-features --features og-images"
          - "--features ssr,og-images,json-ld"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install fontconfig freetype pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets ${{ matrix.features }} -- -D warnings

      - name: Run unit tests
        run: cargo test --lib ${{ matrix.features }}

      - name: Run integration tests
        run: cargo test --test '*' ${{ matrix.features }}

      - name: Run doc tests
        run: cargo test --doc ${{ matrix.features }}

      - name: Check examples compile
        run: |
          if [ -d "examples" ]; then
            for example in examples/*/; do
              if [ -f "$example/Cargo.toml" ]; then
                cargo check --manifest-path "$example/Cargo.toml" ${{ matrix.features }}
              fi
            done
          fi
        shell: bash

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev \
            bc

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate coverage report
        run: |
          cargo llvm-cov --all-features --workspace \
            --ignore-filename-regex '(benches|tests|examples)/' \
            --lcov --output-path lcov.info

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage from lcov.info
          COVERAGE=$(grep -o 'lines.*: [0-9.]*%' lcov.info | head -1 | grep -o '[0-9.]*' || echo "0")
          echo "Current coverage: ${COVERAGE}%"

          # Check if coverage meets 95% threshold
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below 95% threshold"
            echo "::error::Test coverage ${COVERAGE}% is below the required 95% threshold"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets 95% threshold"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          fail_ci_if_error: true
          verbose: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev \
            bc

      - name: Run benchmarks
        run: |
          cargo bench --all-features -- --save-baseline main

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "cargo"
          output-file-path: target/criterion/main/estimates.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: "150%"
          fail-on-alert: true

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      test-server:
        image: node:18
        ports:
          - 3000:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev \
            bc

      - name: Install Playwright browsers
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps chromium firefox webkit

      - name: Build test server
        run: |
          cargo build --release --all-features

      - name: Start test server
        run: |
          ./target/release/test-server &
          sleep 10 # Wait for server to start
        env:
          PORT: 3000

      - name: Run E2E tests
        run: cargo test --test e2e --all-features
        env:
          TEST_BASE_URL: http://localhost:3000

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-artifacts
          path: |
            tests/fixtures/visual/*-current.png
            playwright-report/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-audit
          version: latest

      - name: Run security audit
        run: cargo audit

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check
          arguments: --all-features

      - name: Check security advisories
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check advisories
          arguments: --all-features

  dependencies:
    name: Dependency Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Check outdated dependencies
        run: cargo outdated --depth=1 --exit-code=1

      - name: Check dependency licenses
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check licenses
          arguments: --all-features

      - name: Check dependency sources
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check sources
          arguments: --all-features

      - name: Check dependency graph
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check graph
          arguments: --all-features

  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.70.0 # Minimum supported Rust version

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev \
            bc

      - name: Check MSRV compatibility
        run: cargo check --all-features

  fuzz:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Create fuzz directory if it doesn't exist
        run: |
          if [ ! -d "fuzz" ]; then
            cargo fuzz init
          fi

      - name: Run fuzzing
        run: |
          cd fuzz
          # Run each fuzz target for 60 seconds
          for target in fuzz_targets/*.rs; do
            target_name=$(basename "$target" .rs)
            timeout 60 cargo fuzz run "$target_name" || true
          done

      - name: Upload fuzz artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: fuzz-artifacts
          path: fuzz/artifacts/
          retention-days: 7

  wasm:
    name: WebAssembly Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain with wasm32 target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Check WASM compilation
        run: |
          cargo check --target wasm32-unknown-unknown --no-default-features --features csr

      - name: Run WASM tests
        run: |
          wasm-pack test --headless --firefox --chrome --safari
        env:
          WASM_BINDGEN_TEST_TIMEOUT: 60

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev \
            bc

      - name: Check documentation
        run: |
          RUSTDOCFLAGS="-D warnings" cargo doc --all-features --no-deps

      - name: Test documentation examples
        run: |
          cargo test --doc --all-features

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check if version was bumped
        run: |
          # Extract version from Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d '"' -f 2)
          echo "Current version: $VERSION"

          # Check if CHANGELOG.md mentions this version
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "::warning::Version $VERSION not found in CHANGELOG.md"
          fi

      - name: Dry-run cargo publish
        run: |
          cargo publish --dry-run --all-features

      - name: Check semver compatibility
        uses: obi1kenobi/cargo-semver-checks-action@v1
        with:
          package: leptos-next-metadata
