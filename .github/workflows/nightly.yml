name: Nightly Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual trigger

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  extended-fuzz:
    name: Extended Fuzz Testing
    runs-on: ubuntu-latest
    timeout-minutes: 240 # 4 hours maximum
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Setup fuzz targets
        run: |
          if [ ! -d "fuzz" ]; then
            cargo fuzz init
            # Add custom fuzz targets
            cargo fuzz add metadata_merge
            cargo fuzz add og_template
            cargo fuzz add json_ld_serialize
          fi

      - name: Run extended fuzzing (4 hours)
        run: |
          cd fuzz
          for target in fuzz_targets/*.rs; do
            target_name=$(basename "$target" .rs)
            echo "Fuzzing $target_name for 3600 seconds..."
            timeout 3600 cargo fuzz run "$target_name" -- -max_total_time=3600 || true
          done

      - name: Upload fuzz results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: nightly-fuzz-results
          path: |
            fuzz/artifacts/
            fuzz/corpus/
          retention-days: 30

  performance-regression:
    name: Performance Regression Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev

      - name: Install additional tools
        run: |
          cargo install cargo-criterion
          cargo install divan-cli

      - name: Run performance regression tests
        run: |
          cargo test --release --test performance_regression_test

      - name: Run detailed benchmarks
        run: |
          cargo bench --all-features -- --output-format=json > benchmark_results.json

      - name: Analyze performance trends
        run: |
          # Compare against historical baselines
          divan --compare=baseline benchmark_results.json || true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: nightly-performance-results
          path: |
            benchmark_results.json
            target/criterion/
          retention-days: 30

  memory-leak-detection:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Install system dependencies
        run: |
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev

      - name: Run tests with Valgrind
        run: |
          # Run a subset of tests under Valgrind
          cargo test --bin test_memory_usage
          valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
            --track-origins=yes --verbose --log-file=valgrind.log \
            ./target/debug/test_memory_usage || true

      - name: Analyze memory report
        run: |
          if [ -f valgrind.log ]; then
            echo "Memory analysis results:"
            cat valgrind.log

            # Check for memory leaks
            if grep -q "definitely lost" valgrind.log; then
              echo "::error::Memory leaks detected!"
              exit 1
            fi
          fi

      - name: Upload memory analysis
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: memory-analysis
          path: |
            valgrind.log
            *.profraw
          retention-days: 30

  cross-compilation:
    name: Cross-Platform Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - armv7-unknown-linux-gnueabihf
          - wasm32-unknown-unknown
          - wasm32-wasi
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust with target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cross compile
        run: |
          if [[ "${{ matrix.target }}" == "wasm32-"* ]]; then
            cargo check --target ${{ matrix.target }} --no-default-features --features csr
          else
            cross check --target ${{ matrix.target }} --all-features
          fi

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install audit tools
        run: |
          cargo install cargo-audit
          cargo install cargo-outdated
          cargo install cargo-geiger

      - name: Security audit
        run: |
          echo "## Security Audit" > audit_report.md
          echo '```' >> audit_report.md
          cargo audit >> audit_report.md || true
          echo '```' >> audit_report.md

      - name: Check for outdated dependencies
        run: |
          echo "## Outdated Dependencies" >> audit_report.md
          echo '```' >> audit_report.md
          cargo outdated >> audit_report.md || true
          echo '```' >> audit_report.md

      - name: Unsafe code analysis
        run: |
          echo "## Unsafe Code Analysis" >> audit_report.md
          echo '```' >> audit_report.md
          cargo geiger >> audit_report.md || true
          echo '```' >> audit_report.md

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-report
          path: audit_report.md
          retention-days: 30

  comprehensive-e2e:
    name: Comprehensive E2E Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev

      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build and start test server
        run: |
          cargo build --release --all-features --bin test-server
          ./target/release/test-server &
          sleep 15
        env:
          PORT: 3000

      - name: Run browser-specific E2E tests
        run: |
          cargo test --test e2e --all-features
        env:
          TEST_BASE_URL: http://localhost:3000
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}

      - name: Run visual regression tests
        run: |
          cargo test --test visual_regression_test --all-features
        env:
          TEST_BASE_URL: http://localhost:3000
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          UPDATE_SNAPSHOTS: false

      - name: Upload visual diffs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-diffs-${{ matrix.browser }}
          path: tests/fixtures/visual/*-current.png
          retention-days: 7

  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install mdbook
        run: |
          cargo install mdbook mdbook-linkcheck mdbook-mermaid

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            pkg-config \
            libfreetype6-dev \
            libglib2.0-dev \
            libxml2-dev

      - name: Validate all documentation examples
        run: |
          # Extract and test all code examples from documentation
          find docs/ -name "*.md" -exec grep -l "```rust" {} \; | while read -r file; do
            echo "Testing examples in $file"
            # Extract rust code blocks and test them
            awk '/```rust/,/```/' "$file" | grep -v '```' > temp_example.rs
            if [ -s temp_example.rs ]; then
              rustc --edition 2021 --crate-type bin temp_example.rs -o temp_example || echo "Failed to compile example in $file"
              rm -f temp_example temp_example.rs
            fi
          done

      - name: Build documentation with all features
        run: |
          RUSTDOCFLAGS="-D warnings --cfg docsrs" \
          cargo +nightly doc --all-features --no-deps

      - name: Check documentation links
        run: |
          if [ -d "book" ]; then
            mdbook build book
            mdbook test book
          fi

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs:
      [
        extended-fuzz,
        performance-regression,
        memory-leak-detection,
        cross-compilation,
        dependency-audit,
        comprehensive-e2e,
        docs-validation,
      ]
    if: always()
    steps:
      - name: Summarize results
        run: |
          echo "## Nightly Test Results" > results.md
          echo "Date: $(date)" >> results.md
          echo "" >> results.md

          # Check job statuses
          if [[ "${{ needs.extended-fuzz.result }}" != "success" ]]; then
            echo "❌ Extended Fuzz Testing: ${{ needs.extended-fuzz.result }}" >> results.md
          else
            echo "✅ Extended Fuzz Testing: passed" >> results.md
          fi

          if [[ "${{ needs.performance-regression.result }}" != "success" ]]; then
            echo "❌ Performance Regression: ${{ needs.performance-regression.result }}" >> results.md
          else
            echo "✅ Performance Regression: passed" >> results.md
          fi

          if [[ "${{ needs.memory-leak-detection.result }}" != "success" ]]; then
            echo "❌ Memory Leak Detection: ${{ needs.memory-leak-detection.result }}" >> results.md
          else
            echo "✅ Memory Leak Detection: passed" >> results.md
          fi

          if [[ "${{ needs.cross-compilation.result }}" != "success" ]]; then
            echo "❌ Cross Compilation: ${{ needs.cross-compilation.result }}" >> results.md
          else
            echo "✅ Cross Compilation: passed" >> results.md
          fi

          if [[ "${{ needs.dependency-audit.result }}" != "success" ]]; then
            echo "❌ Dependency Audit: ${{ needs.dependency-audit.result }}" >> results.md
          else
            echo "✅ Dependency Audit: passed" >> results.md
          fi

          if [[ "${{ needs.comprehensive-e2e.result }}" != "success" ]]; then
            echo "❌ Comprehensive E2E: ${{ needs.comprehensive-e2e.result }}" >> results.md
          else
            echo "✅ Comprehensive E2E: passed" >> results.md
          fi

          if [[ "${{ needs.docs-validation.result }}" != "success" ]]; then
            echo "❌ Documentation Validation: ${{ needs.docs-validation.result }}" >> results.md
          else
            echo "✅ Documentation Validation: passed" >> results.md
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('results.md', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Nightly test failures - ${new Date().toISOString().split('T')[0]}`,
              body: `${results}\n\n**Workflow:** ${context.workflow}\n**Run ID:** ${context.runId}`,
              labels: ['bug', 'nightly-failure', 'automated']
            });
